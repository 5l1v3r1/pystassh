{
  "name": "Pystassh",
  "tagline": "An easy to use libssh wrapper to execute commands on a remote server via SSH with Python.",
  "body": "[![Build Status](https://travis-ci.org/julienc91/pystassh.png)](https://travis-ci.org/julienc91/pystassh)\r\n[![Coverage Status](https://coveralls.io/repos/github/julienc91/pystassh/badge.svg?branch=master)](https://coveralls.io/github/julienc91/pystassh?branch=master)\r\n[![Documentation](https://readthedocs.org/projects/pystassh/badge/)](http://pystassh.readthedocs.org/en/latest/)\r\n\r\npystassh\r\n========\r\n\r\nAn easy to use libssh wrapper to execute commands on a remote server via SSH with Python.\r\n\r\n* Author: Julien CHAUMONT (https://julienc.io)\r\n* Version: 1.0\r\n* Date: 2016-07-30\r\n* Licence: MIT\r\n* Url: http://github.com/julienc91/pystassh\r\n\r\nInstallation\r\n------------\r\n\r\nJust use `pip` to install the package:\r\n\r\n    pip install pystassh\r\n    \r\n`pystassh` is working with python 2.7, python 3+ and pypy.\r\n\r\nRequirements\r\n------------\r\n\r\n`pystassh` is using libssh to work, you will have to install the library before using\r\n`pystassh`. Only version 0.7.3 was used during the development, but versions 0.5 and above should work fine as well with `pystassh`.\r\nVisit [libssh's official website](https://www.libssh.org/get-it/) for more information.\r\n\r\nOn Debian and Ubuntu:\r\n\r\n    apt-get install libssh-4\r\n    \r\nOn Fedora:\r\n\r\n    dnf install libssh\r\n\r\nExamples\r\n--------\r\n\r\nRunning simple commands:\r\n\r\n    >>> from pystassh import Session\r\n    >>> with Session('remote_host.org', username='foo', password='baz') as ssh_session:\r\n    ...     res = ssh_session.execute('whoami')\r\n    >>> res.stdout\r\n    'foo'\r\n    \r\nHandling errors:\r\n\r\n    >>> from pystassh import Session\r\n    >>> with Session('remote_host.org', username='foo', password='baz') as ssh_session:\r\n    ...     res = ssh_session.execute('whoam')\r\n    >>> res.stderr\r\n    'bash: whoam : command not found'\r\n    \r\nRunning multiple commands:\r\n\r\n    >>> from pystassh import Session\r\n    >>> with Session('remote_host.org', username='foo', password='baz') as ssh_session:\r\n    ...     ssh_session.execute('echo \"bar\" > /tmp/foo')\r\n    ...     res = ssh_session.execute('cat /tmp/foo')\r\n    >>> res.stdout\r\n    'bar'\r\n    \r\nUse a session without a `with` block:\r\n\r\n    >>> from pystassh import Session\r\n    >>> ssh_session = Session('remote_host.org', username='foo', password='baz')\r\n    >>> ssh_session.connect()\r\n    >>> res = ssh_session.execute('whoami')\r\n    >>> res.stdout\r\n    'foo'\r\n    >>> ssh_session.disconnect()\r\n\r\n\r\nDocumentation\r\n-------------\r\n\r\nThe complete documentation is available at: http://pystassh.readthedocs.org/en/latest/\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}